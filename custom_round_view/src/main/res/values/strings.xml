<resources>
    <string name="app_name">custom_round_view</string>
    <string name="message_xfermode_1">Xfermode是什么呢？\n
Xfermode称为图形混合模式也被称为过渡模式，把两个图形混合成一张图。\n

Xfermode 实现类有AvoidXfermode，PixelXorXfermode，PorterDuffXfermode，但是AvoidXfermode，PixelXorXfermode都已经被标识不推荐使用了，所以就只有PorterDuffXfermode一个实现类。PorterDuffXfermode用于图形合成时的图像过渡模式计算。
前两个实现类在API level 16被标记为Deprecated了（因为不支持硬件加速），用也可以，但是需要关闭硬件加速，高版本api默认打开硬件加速，如果需要关闭硬件加速，无法发挥OpenGLes的作用，也就无法充分利用GPU绘图能力，有关硬件加速请看https://developer.android.com/guide/topics/graphics/hardware-accel；
PorterDuff.Mode它是将所绘制的图形的像素与Canvas中对应位置的像素按照一定规则进行混合,形成新的像素值,从而更新Canvas中最终的像素颜色值.\n
PorterDuff.Mode共有18种\n
Android 中使用 图层混合模式常见的地方有三种:\n

1. 组合渲染ComposeShader (详见: Android Paint总结)\n

2. 画笔: Paint.setXfermode()\n

3. 颜色过滤器: PorterDuffColorFilter\n

</string>

    <string name="message_xfermode_2">
每一个图层混合模式代表一种规则,根据每种规则计算混合之后的透明通道值和颜色值
使用图层混合模式有几个需要注意的点:\n\n

1. 图层混合模式仅作用于src源图像\n

意思是:以下面谷歌的demo中的第一个为例使用的模式为PorterDuff.Mode.CLEAR
,源图像src为矩形图 目标图为圆形图dst,PorterDuff.Mode.CLEAR表示清除所有颜色值和透明通道,我们从效果可以看到,目标图dst只有与源图像src相交的地方才会有影响\n\n

2. 禁用硬件加速\n

原因: 在Android api 14之后,图层混合的有些api是不支持硬件加速的,系统的硬件加速是默认开启的,所以在使用图层混合模式之前,禁用掉硬件加速 ,方式如下:\n

//禁止硬件加速\n
setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n\n


3. 离屏绘制\n

原因: 在不采用离屏绘制的情况下,控件的背景会影响图层混合模式的计算结果,导致得到期望之外的效果\n
我们看下使用/不使用 离屏绘制的区别:\n\n

    </string>

    <string name="message_xfermode_3">

通过使用离屏绘制(离屏缓冲),把要绘制的内容单独绘制在缓冲层,保证Xfermode的使用不会出现错误的结果\n

离屏绘制有两种使用方式,一般使用第一种方式就足够了:\n\n

Canvas.saveLayer() 可以做短时的离屏绘制,在绘制之前保存 ,绘制之后结束,使用方式如下:\n

 int saveId= canvas.saveLayer(0, 0, width, height, Canvas.ALL_SAVE_FLAG);\n
                canvas.translate(x, y);\n
                canvas.drawBitmap(mDstB, 0, 0, paint);//绘制操作\n
                paint.setXfermode(xfermode);//设置xfermode\n
                canvas.drawBitmap(mSrcB, 0, 0, paint);//绘制操作\n
                paint.setXfermode(null); //用完清除\n
                canvas.restoreToCount(saveId);//图层恢复\n\n
View.setLayerType() 直接把整个View都绘制在离屏缓冲中,使用如下:\n\n

setLayerType(LAYER_TYPE_HARDWARE,paint);//使用GPU缓冲\n
setLayerType(LAYER_TYPE_SOFTWARE,paint);//使用一个Bitmap缓冲\n

    </string>

    <string name="message_xfermode_4">
        两个图形一圆一方通过设置不同的模式会产生不同的组合效果，\n

在API中Android为我们提供了18种（比上图多了两种ADD和OVERLAY）模式：　\n\n

ADD:                饱和相加,对图像饱和度进行相加,不常用\n
CLEAR:             清除图像\n
DARKEN:          变暗,较深的颜色覆盖较浅的颜色，若两者深浅程度相同则混合\n
DST:                只显示目标图像\n
DST_ATOP:      在源图像和目标图像，相交的地方绘制【目标图像】，  不相交的地方绘制【源图像】，相交处的效果受到源图像和目标图像alpha的影响\n
DST_IN:           只在源图像和目标图像相交的地方绘制【目标图像】，绘制效果受到源图像对应地方透明度影响\n
DST_OUT:        只在源图像和目标图像不相交的地方绘制【目标图像】，在相交的地方根据源图像的alpha进行过滤，源图像完全不透明则完全过滤，完全透明则不过滤\n
DST_OVER:        将目标图像放在源图像上方\n
LIGHTEN:           变亮，与DARKEN相反，DARKEN和LIGHTEN生成的图像结果与Android对颜色值深浅的定义有关\n
MULTIPLY:        正片叠底，源图像素颜色值乘以目标图像素颜色值除以255得到混合后图像像素颜色值\n
OVERLAY:        叠加\n
SCREEN:         滤色，色调均和,保留两个图层中较白的部分，较暗的部分被遮盖\n
SRC:                只显示源图像\n
SRC_ATOP:        在源图像和目标图像相交的地方绘制【源图像】，在不相交的地方绘制【目标图像】，相交处的效果受到源图像和目标图像alpha的影响\n
SRC_IN:        只在源图像和目标图像相交的地方绘制【源图像】\n
SRC_OUT:    只在源图像和目标图像不相交的地方绘制【源图像】，相交的地方根据目标图像的对应地方的alpha进行过滤，目标图像完全不透明则完全过滤，完全透明则不过滤\n
SRC_OVER:    将源图像放在目标图像上方\n
XOR:            在源图像和目标图像相交的地方之外绘制它们，在相交的地方受到对应alpha和色值影响，如果完全不透明则相交处完全不绘制\n\n

    </string>


    <string name="message_clip_path_1">
      在Android自定义View使用绘图的裁剪功能的时候,我们最好manifest中的<application /> 或者<activity />或者<fragment />标签中添加如下属性\n\n
        android:hardwareAccelerated="false"\n\n
因为裁剪功能是不支持硬件加速的.没有设置的话,有可能绘图裁剪的效果出不来;\n

Android Canvas原生api裁剪方法中clipRect和clipPath方法中，有的不传递Region.Op参数,其实在它的内部默认Region.Op.INTERSECT.这点可以查看他们的api可知;\n
    public boolean clipRect(@NonNull RectF rect) {\n
        return native_clipRect(mNativeCanvasWrapper, rect.left, rect.top, rect.right,\n
           rect.bottom, Region.Op.INTERSECT.nativeInt);\n
    }\n

    public boolean clipPath(@NonNull Path path) {\n
        return clipPath(path, Region.Op.INTERSECT);\n
    }\n\n
Region.Op是一个枚举类型，总共有如下几个枚举对象;\n\n
    // the native values for these must match up with the enum in SkRegion.h\n
    public enum Op {\n
        DIFFERENCE(0),\n
        INTERSECT(1),\n
        UNION(2),\n
        XOR(3),\n
        REVERSE_DIFFERENCE(4),\n
        REPLACE(5);\n

        Op(int nativeInt) {\n
            this.nativeInt = nativeInt;\n
        }\n

        /**\n
         * @hide\n
         */\n
        public final int nativeInt;\n
    }\n\n
那么他们什么含义呢？ 形象的举个例子\n\n

A:表示第一个裁剪的形状;\n

B:表示第二次裁剪的形状;\n

1.    Region.Op.DIFFERENCE ：是A形状中不同于B的部分显示出来\n
2.    Region.Op.REPLACE：是只显示B的形状\n
3.    Region.Op.REVERSE_DIFFERENCE ：是B形状中不同于A的部分显示出来，这是没有设置时候默认的\n
4.    Region.Op.INTERSECT：是A和B交集的形状\n
5.    Region.Op.UNION：是A和B的全集\n
6.    Region.Op.XOR：是全集形状减去交集形状之后的部分\n

下面通过代码示例逐个验证：\n\n
              canvas.save();\n
            canvas.translate(10, 10);\n
            //画笔颜色设置为浅蓝色\n
            mPaint.setColor(Color.parseColor("#D4E9FA"));\n
            //画笔画一个矩形\n
            canvas.drawRect(new RectF(0, 0, 300, 300), mPaint);\n
            //画笔画一个圆形\n
            canvas.drawCircle(300, 150, 150, mPaint);\n

            //上面的画的一个矩形和圆形是属于浅蓝色的底层背景，是为了便于观察效果的，没有什么其他含义\n
            //下面开始真正的clip操作\n
            //1.画布裁剪一个矩形\n
            canvas.clipRect(new RectF(0, 0, 300, 300));//第一个裁剪一个形状相当于A\n
            //2.画布裁剪一个圆形\n
            Path mPath = new Path();\n
            mPath.addCircle(300, 150, 150, Path.Direction.CCW);\n
            //2.1这里只是改变第二个参数Region.Op.来观察效果\n
            canvas.clipPath(mPath, Region.Op.DIFFERENCE);//第二个裁剪一个形状相当于B\n
            //3.裁剪完之后,画一个最大长宽的红色矩形观察效果\n
            //画笔颜色设置为浅红色\n
            mPaint.setColor(Color.parseColor("#FF4081"));\n
            canvas.drawRect(new RectF(0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE), mPaint);\n
            canvas.restore();\n\n

    </string>

    <string name="message_bitmap_shader_1">
        BitmapShader 的作用\n\n
官方文档说的很清楚了：\n
Shader used to draw a bitmap as a texture.\n
BitmapShader的作用是使用特定的图片来作为纹理来使用。\n\n\n


        在Android提供了Shader类专门用来渲染图像以及一些几何图形。
        Shader就是着色器的意思。我们可以这样理解，Canvas中的各种drawXXX方法定义了图形的形状，画笔中的Shader
        则定义了图形的着色、外观，二者结合到一起就决定了最终Canvas绘制的被Shader类包括了5个直接子类，分别是BitmapShader、
        ComposeShader、LinearGradient、RadialGradient和SweepGradient。BitmapShader要用于图像渲染，
        ComposeShader用于混合渲染，LinearGradient用于线性渲染，RadialGradient用于环形渲染，
        SweepGradient则用于梯度渲染。\n
        BitmapShader，就是用Bitmap对绘制的图形进行渲染着色。可以通过Paint.setShader（Shader shader）进行设置，BitmapShader构造函数如下所示：
public BitmapShader (Bitmap bitmap, Shader.TileMode tileX, Shader.TileMode tileY);
参数bitmap表示用来作为纹理填充的位图；参数tileX表示在位图X方向上位图衔接形式；参数tileY表示在位图Y方向上位图衔接形式。\n\n\n

Shader.TileMode有3种参数可供选择，分别为CLAMP、REPEAT和MIRROR。\n\n

CLAMP： 表示拉伸 ，当所画图形的尺寸大于Bitmap的尺寸的时候，拉伸的是图片最后的那一个像素，横向的最后一个横行像素，不断的重复，纵项的那一列像素，不断的重复。\n
REPEAT：表示重复，当绘制的图形尺寸大于Bitmap尺寸时，会用Bitmap重复平铺整个绘制的区域。\n
MIRROR：表示镜像，当绘制的图形尺寸大于Bitmap尺寸时，MIRROR也会用Bitmap重复平铺整个绘图区域，与REPEAT不同的是横向不断翻转重复，纵向不断翻转重复。\n

</string>
    <string name="message_android_shader_1">
        在Android提供了Shader类专门用来渲染图像以及一些几何图形。\n
        Shader就是着色器的意思。\n
        Android中的shader，其实基本都是自定义view的时候会用到，而且是将shader赋予给paint，类似这样：\n\n
    Paint paint = new Paint();\n
Shader shader = new Shader();\n
paint.setShader(shader);\n
    但是大家一般不会直接使用Shader，而是使用Shader的子类，Shader的子类有5个，如图：\n\n
    </string>
    <string name="message_android_shader_2">
        在讲这些子类之前，我希望大家先理解了shader的实质，然后再去学习这些子类，我想，这样会轻松很多。\n
    shader按照官方的解释是：\n\n
    Shader is the based class for objects that return horizontal spans of colors during drawing. A subclass of Shader is installed in a Paint calling paint.setShader(shader). After that any object (other than a bitmap) that is drawn with that paint will
        get its color(s) from the shader.\n
        Shader是Object的子类，这些对象在绘制过程中返回颜色的水平跨度。通过Paint.setShader(shader)来使用Shader。调用了该方法后，用该paint绘制的任何对象(bitmap除外)都将从shader获得其颜色。\n
    下面我们用示例的形式来查看下对应的作用。\n
    我用我的理解方式给大家捋一捋，shader到底是干啥的。\n
    这个时候，我们需要换一种理解方式来理解手机屏幕上面的字，如图：\n\n

    </string>

    <string name="message_android_shader_3">
        这幅图上的东西是什么，白底？黑字？再也别这样理解了，现在在学习shader呢，换一种理解方式。\n
    这张图片是由2张大小相同的纸构成的，第一张纸，纯黑色，第二张纸，纯白色的，不过第二张纸不是完整的，中间被扣走了部分，被扣走的部分，刚好看着有点像“演示文字”4个大字。然后将这两张纸重叠后，最终形成了如图所示的效果。\n
    类似这种理解：\n\n

    </string>
    <string name="message_android_shader_4">
    (PS: 不会扣字，只好扣个方框意思一下)\n
    好的，现在我们已经丢掉了传统的思维方式：在白纸上写字。\n
    OK，我现在要来讲shader了，shader其实就和两张纸的思维方式一样，可以这样强行理解shader，shader就是下面那张黑纸，画笔在白纸上画，或者说划？划破白纸，扣出某个形状，再搭在黑纸上，就能看到那个形状了。\n
    比如我们把上图的那4个字的底下那层黑纸给换成一张图片，按照我们的最新的理解方式，文字就会是这样的\n\n
    </string>
    <string name="message_android_shader_5">
我们把上面那层白纸换成有点透明度的白纸，来看看全貌：\n\n
    </string>
    <string name="message_android_shader_6">
好了，跟着思路，我们开始，shader现在我们已经强行理解成下面那层的图片了，也就是说，当我们在作出如下行为的时候：\n\n
    Paint paint = new Paint();\n
Shader shader = new Shader();\n
paint.setShader(shader);\n\n


    实际上是修改了底层的图层，并且绘图模式变成了在上面那层扣形状，然后重叠，将下面那层的颜色通过被扣除的部分显示出来，赋予这个形状不一样的颜色。\n
    所以，当我们为画笔设置shader的时候，使用paint.setColor()这种方法就显的没有意义了。\n
    好了，关于shader的概念，我就先讲到这里了，要不要再回去看看官方的解释？\n\n
    </string>
    <string name="message_android_shader_7">
        BitmapShader\n
首先我们先讲BitmapShader，容易跟上节奏，BitmapShader是Shader的子类，在使用他的时候，要传递一个bitmap，可想而知，这个bitmap就成了这个图像的底层。\n
我们拿这张图片作为例子底层\n\n
    </string>
    <string name="message_android_shader_8">
    override fun onDraw(canvas: Canvas?) {\n
        super.onDraw(canvas)\n
        val shader = BitmapShader(\n
            bgBitmap,\n
            Shader.TileMode.REPEAT, Shader.TileMode.REPEAT\n
        )\n

        mPaint.shader = shader\n
        mPaint.textSize = mTextSize\n


        //计算baseline\n
        val fontMetrics: Paint.FontMetrics = mPaint.fontMetrics\n
        val distance = (fontMetrics.bottom - fontMetrics.top) / 2 - fontMetrics.bottom\n
        val baseline: Float = height.toFloat() / 2 + distance\n
        canvas?.drawText(mText, width / 2f, baseline, mPaint)\n

    }\n


    val bgBitmap by lazy {\n
        val options: BitmapFactory.Options = BitmapFactory.Options()\n
        options.inJustDecodeBounds = true\n
        BitmapFactory.decodeResource(\n
            context!!.resources,\n
            R.drawable.sadeqjedhqwj,\n
            options\n
        )\n
        //获取压缩比例并压缩\n
        options.inSampleSize = min(width / options.outWidth, height / options.outHeight)\n
        options.inJustDecodeBounds = false\n

        val bitmap = BitmapFactory.decodeResource(\n
            context!!.resources,\n
            R.drawable.sadeqjedhqwj,\n
            options\n
        )\n
        //缩放到指定大小\n
        Bitmap.createScaledBitmap(bitmap,width,height,false)\n
    }\n

        待会再讲里面的Shader.TileMode是干嘛的，现在先这样填写，现在这个paint就被赋予了魔力，我们在onDraw中使用这个paint写几个字：
      //计算baseline\n
        val fontMetrics: Paint.FontMetrics = mPaint.fontMetrics\n
        val distance = (fontMetrics.bottom - fontMetrics.top) / 2 - fontMetrics.bottom\n
        val baseline: Float = height.toFloat() / 2 + distance\n
        canvas?.drawText(mText, width / 2f, baseline, mPaint)\n\n
        没错，效果就是之前看到的：\n\n
    </string>

    <string name="message_android_shader_9">
        你还可以绘制任意图形\n\n
    </string>
    <string name="message_android_shader_10">
      接下来我来解释下BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);中后面的那两个参数具体是干嘛的。\n
    首先Shader.TileMode顾名思义肯定是一种模式，到这里就可以理解为是一种显示模式，进入这个类，我们会发现一共有 CLAMP, REPEAT, MIRROR三种显示模式。\n
        方法中的第一个Shader.TileMode是X轴的显示模式，第二个是Y轴上的显示模式。\n
    BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP); 好像图片所不及的区域，就取了图片对应轴上的最后一个颜色对其复制\n
    </string>
    <string name="message_android_shader_11">
    BitmapShader(bitmap1, Shader.TileMode.MIRROR, Shader.TileMode.MIRROR);\n
这个就是镜面对称\n
    </string>
    <string name="message_android_shader_12">
BitmapShader(bitmap1, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);\n
这个自然是无限重复了\n
    </string>
    <string name="message_linear_gradient_1">
    用来实现线性渐变效果\n

此类是Shader的子类\n
通过paint.setShader来设置渐变。\n

有两个构造方法分别如下：\n

LinearGradient(float x0, float y0, float x1, float y1, int colors[], float positions[], TileMode tile)\n
注：Android中计算x,y坐标都是以屏幕左上角为原点，向右为x+，向下为y+\n
第一个参数为线性起点的x坐标\n
第二个参数为线性起点的y坐标\n
第三个参数为线性终点的x坐标\n
第四个参数为线性终点的y坐标\n
第五个参数为实现渐变效果的颜色的组合\n
第六个参数为前面的颜色组合中的各颜色在渐变中占据的位置（比重），如果为空，则表示上述颜色的集合在渐变中均匀出现\n
第七个参数为渲染器平铺的模式，一共有三种\n
-CLAMP\n
边缘拉伸\n
-REPEAT\n
在水平和垂直两个方向上重复，相邻图像没有间隙\n
-MIRROR\n
以镜像的方式在水平和垂直两个方向上重复，相邻图像有间隙\n\n

public LinearGradient(float x0, float y0, float x1, float y1, int color0, int color1, TileMode tile)\n
其他参数同上\n
int color0表示渐变起始颜色\n
int color1表示渐变终止颜色\n


</string>

    <string name="message_linear_gradient_2">
    下面主要来演示一下第一种构造方法下的实现效果：\n
    首先是\n\n
    val linearGradient =\n
                LinearGradient(\n
                        0f,\n
                        0f,\n
                        width.toFloat(),\n
                        0f,\n
                        arrayListOf(Color.parseColor("#FFEE3A8C"), Color.parseColor("#FFCD0000"), Color.parseColor("#FF9400D3")).toIntArray(),\n
                        arrayListOf(0.1f, 0.2f, 1.0f).toFloatArray(),\n
                        Shader.TileMode.CLAMP\n
                )\n
        mPaint.shader = linearGradient\n

        canvas?.apply {\n
            save()\n
            canvas.drawRect(Rect(0, 0, width, height), mPaint)\n
            restore()\n
        }\n\n
这个效果就是将图片划分成粉红、深红、紫色三部分，各个颜色的横向比重为1:1:8 即(0-0.1)：(0.2-0.1):(1.0-0.2)\n
        你要记住最终变成1.0表示占满LinearGradient.width\n
        第一次我们演示的是水平填充，各个图快占用的比例如图所示\n
    </string>
    <string name="message_linear_gradient_3">
        还是上面的栗子，我们将参数3和参数4变更为参数会怎么样？\n
        答案是可以改变颜色梯度的角度\n
        变换成45度渲染，绘制是沿着直线进行的\n
    </string>
    <string name="message_linear_gradient_4">
        修改梯度线为竖直，你会发现颜色梯度变化变成竖直了\n
        会变成竖向的色彩变化\n
    </string>

    <string name="message_linear_gradient_5">
        反向绘制渐变色。\n
        上面的栗子都是从0开始的，那我们如果是从view.width开始到0，参数2一直为0会怎么样呢\n
        没错颜色会倒序绘制,正好和上面的栗子是反的\n
    </string>
    <string name="message_linear_gradient_6">
        再来看一个对角绘制的栗子\n
    </string>
    <string name="message_linear_gradient_7">
        最后一个参数Shader.TileMode\n
        这个是颜色的矩形块不足填充需要绘制区域的时候，区域外面的填充模式使用的\n
        上面的栗子都是宽度等于控件宽度，那么如果不等于且填充模式为 Shader.TileMode.CLAMP怎么样呢？\n
    </string>
    <string name="message_linear_gradient_8">
        Shader.TileMode.REPEAT怎么样呢？\n
    </string>
    <string name="message_linear_gradient_9">
        Shader.TileMode.MIRROR怎么样呢？\n
    </string>
    <string name="message_linear_gradient_10">
         从上面的栗子我们可以得出结论，\n\n
        1. LinearGradient实际就相当于提前准备了一个色块，这个色块有自己的方向，就是前四个参数组成的两个顶点连线的方向，按照将这个色块放置在画笔当中，当我们去绘制一个图形的
        时候我们会从画笔的shader中去获取这个渐变色矩形块，填充canvas绘制的图形（画笔的颜色会不生效，优先获取shader的颜色渐变块）。\n
        2. 总结前四个参数就是为了调整梯度变化方向控制的
        3. 如果shader颜色矩形块大，那么直接填充绘制\n
        4. 如果shader颜色矩形块小，那么会在shader大小不足的地方根据最后一个参数 Shader.TileMode 去填充\n
        5. 填充的比例是累加的，直到最后一个参数必须为1.0f,如果比例不写，就是均匀分配
        我们可以利用这个特性绘制一些特殊的效果\n
    </string>
    <string name="message_linear_gradient_12">
       使用LinearGradient配合Matrix实现文字闪动效果：\n
首先需要设置渐变（在onSizeChaged方法中实现）\n
mLinearGradient = new LinearGradient(0,0,mViewWidth,0,new int[]{Color.BLUE,0xffffffff,Color.BLUE},null, Shader.TileMode.CLAMP);\n
然后，在onDraw()方法中，调用如下代码：\n
if(mGradientMatrix != null){ \n
        //从0开始，每次递增mViewWidth / 5，即从最左侧开始每次向前平移1/5个长度\n
        mTransLate += (mViewWidth / 5);\n
        if(mTransLate > mViewWidth){ //渐变平移走到头，需要重新从头开始 \n
        mTransLate = -mViewWidth; \n
        } \n
        mGradientMatrix.setTranslate(mTransLate,0);\n
        mLinearGradient.setLocalMatrix(mGradientMatrix);\n
        postInvalidateDelayed(1000); }\n\n
Matrix表示变换矩阵\n
其中的setTranslate表示平移，两个参数分别为x和y方向平移量\n
setLocalMatrix方法是Shader类的方法\n
表示 设置shader的本地矩阵\n

上述代码意思就是，设置一个偏移量，每次递增1/5View的长度，进行平移，当该长度递增超过了View的长度时就将其平移回最左侧，再从头开始。\n
其中的setLocalMatrix设置了渐变的平移矩阵\n
postInvalidateDelayed表示延迟重绘\n
    </string>
</resources>